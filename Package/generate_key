#!/usr/bin/python

import sys
import os
import subprocess
import random
import string
from Foundation import *
import FoundationPlist

"""
  Basically the idea here is to create a tmpadmin user, add that user to
  filevault using googles fdeadduser(Thanks!). Then using that user
  to generate a recovery key that will then be used by Crypt to escrow
  the key up to the server.

  NOTE!! This uses a hack in fdesetup and works up to 10.11.5 Beta2
"""

def _password_generator(size=6, chars=string.ascii_uppercase + string.digits):
  return ''.join(random.SystemRandom().choice(chars) for _ in range(size))

def _create_tmp_user(password):
  user_cmd = ['/usr/bin/dscl', '.', 'create', '/Users/fvuser']
  password_cmd = ['/usr/bin/dscl', '.', 'passwd', '/Users/fvuser', password]
  shell_cmd = ['/usr/bin/dscl', '.', 'create', '/Users/fvuser', 'UserShell', '/usr/bin/false']
  userg_cmd = ['/usr/bin/dscl', '.', 'create', '/Users/fvuser', 'PrimaryGroupID', '20']
  realname_cmd = ['/usr/bin/dscl', '.', 'create', '/Users/fvuser', 'RealName', 'Filevault User']
  # run the above commands
  subprocess.call(user_cmd)
  subprocess.call(password_cmd)
  subprocess.call(shell_cmd)
  subprocess.call(userg_cmd)
  subprocess.call(realname_cmd)

def check_created_user():
  list_cmd = ['/usr/bin/dscl', '.', 'list', '/Users/']
  allusers = subprocess.check_output(list_cmd)
def _change_recovery(password, plist):
    rotate_inputplist = {"Password": password}
    input_plist = FoundationPlist.writePlistToString(rotate_inputplist)
    cmd = subprocess.Popen(['/usr/bin/fdesetup','changerecovery', '-personal','-outputplist', '-inputplist'],
        stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout_data, err = cmd.communicate(input=input_plist)
    try:
        output_plist = FoundationPlist.readPlistFromString(stdout_data)
        FoundationPlist.writePlist(output_plist, plist)
    except Exception as e:
      print e
      if err:
        _delete_tmp_user("/Users/fvuser")
        os.remove("/opt/local/bin/fdeadduser")
        print 'Encountered error w/rotate subprocess: {0}.'.format(err)
        print 'Encountered some other error on rotate: {0}.'.format(err)
        sys.exit(1)

def _add_fv_user(fdeadduser_path, password):
  """Adds fvuser with the given password"""
  if not os.path.isfile(fdeadduser_path):
    print "ERROR!! We couldn't find {0}".format(fdeadduser_path)
    sys.exit(1)
  add_user_cmd = ['/opt/local/bin/fdeadduser', 'fvuser', password]
  subprocess.call(add_user_cmd)

def _delete_tmp_user(userpath):
  """Deletes the user with the given path to that user, must
  be in a "/Users/foo" format.."""
  delete_cmd = ['/usr/bin/dscl', '.', 'delete', userpath]
  subprocess.call(delete_cmd)

def _make_root_read_only(filepath):
  """ Makes the filepath given owned by root and readable only by root"""
  chown_cmd = ['/usr/sbin/chown', 'root:wheel', filepath]
  chmod_cmd = ['/bin/chmod', '0400', filepath]
  subprocess.call(chown_cmd)
  subprocess.call(chmod_cmd)

def _check_enabled_user(user_to_check):
  """Noticed that some machines are erroring out on the swap due to not being
  able to unlock filevault, this function will check to make sure that the
  fvuser was properly addded to filevault before trying to change the key"""
  fde_users = subprocess.check_output(["/usr/bin/fdesetup", "list"]).split('\n')
  fde_users = [u.split(',')[0] for u in fde_users]
  if not user_to_check in fde_users:
    print fde_users
    return False
  else:
    return True

def _get_enabled_user(plist):
  """Crypt needs an enabled user it its plist that our normal output
  doesn't give us so we need to add a user to the plist"""
  nonusers = [
    'admin',
    'administrator',
    'recovery',
    'fvuser',
  ]
  fde_users = subprocess.check_output(["/usr/bin/fdesetup", "list"]).split('\n')
  for user in fde_users:
      if not user.split(',')[0] in nonusers:
          cryptuser = user.split(',')[0]
          break

  crypt_info = FoundationPlist.readPlist(plist)
  crypt_info['EnabledUser'] = cryptuser
  FoundationPlist.writePlist(crypt_info, plist)

def check_filevault():
  fv_cmd = ['fdesetup', 'status']
  filevault_status = subprocess.check_output(fv_cmd)
  if 'FileVault is Off' in filevault_status:
    print "WARNING!! Filevault is not enabled... We really shouldn't be here..."
    sys.exit(1)

def main():
  check_filevault()
  fdeadduser = "/opt/local/bin/fdeadduser"
  fv_password = _password_generator(10)
  cryptplist = "/private/var/root/crypt_output.plist"
  _create_tmp_user(fv_password)
  _add_fv_user(fdeadduser, fv_password)
  if not _check_enabled_user('fvuser'):
    print "Error we failed to add the user to filevault..."
    _delete_tmp_user("/Users/fvuser")
    os.remove(fdeadduser)
    sys.exit(1)
  _change_recovery(fv_password, cryptplist)
  _delete_tmp_user("/Users/fvuser")
  _get_enabled_user(cryptplist)
  _make_root_read_only(cryptplist)
  os.remove(fdeadduser) #delete the fdeadduser binary
  cryptcmd = ['/Library/Crypt/checkin']
  subprocess.call(cryptcmd) # run crypt to escrow the key

if __name__ == '__main__':
  main()
